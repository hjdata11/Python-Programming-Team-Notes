
# 다이나믹 프로그래밍 (부분 문제의 중복)
# 1. 최적 부분 구조(Optimal Substructure) : 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결 할 수 있습니다.abs
# 2. 중복되는 부분 문제 (Overlapping Subproblem) : 동일한 작은 문제를 반복적으로 해결해야 합니다.
# 가장 먼저 그리디, 구현, 완전 탐색 등의 아이디어로 문제를 해결할 수 있는지 검토 후 풀이 방법이 떠오르지 않으면 다이나믹 프로그래밍 고려

# 메모이제이션 (Memoization) : 한 번 계산한 결과를 메모리 공간에 메모
# 탑다운 : 하향식
# 보텀업 : 상향식

# 피보나치 수열 (중복되는 부분 문제) - 탑다운
# 점화식 : an = an-1 + an-2, a1 = 1, a2=1

d = [0] * 100

def fibo(x):
  if x == 1 or x == 2:
    return 1
  if d[x] != 0:
    return d[x]
  d[x] = fibo(x-1) + fibo(x-2)
  return d[x]

print(fibo(99))

# 피보나치 수열 (중복되는 부분 문제) - 보텀업
# 점화식 : an = an-1 + an-2, a1 = 1, a2=1

d = [0] * 100

d[1] = 1
d[2] = 1
n = 99

for i in range(3, n+1):
  d[i] = d[i-1] + d[i-2]

print(d[n])